// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "articles",
    checkConstraints: {
      articles_xata_id_length_xata_id: {
        name: "articles_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_articles_xata_id_key: {
        name: "_pgroll_new_articles_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "description",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "link",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "name",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "progress",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "attributes_log",
    checkConstraints: {
      attributes_xata_id_length_xata_id: {
        name: "attributes_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_attributes_xata_id_key: {
        name: "_pgroll_new_attributes_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "attribute",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "baseline",
        type: "float",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "metric",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "notes",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "value",
        type: "float",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "weightage",
        type: "float",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "campaigns",
    checkConstraints: {
      campaigns_xata_id_length_xata_id: {
        name: "campaigns_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_campaigns_xata_id_key: {
        name: "_pgroll_new_campaigns_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "description",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "name",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "progress",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "experience_log",
    checkConstraints: {
      experience_xata_id_length_xata_id: {
        name: "experience_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_experience_xata_id_key: {
        name: "_pgroll_new_experience_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "category",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "date",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "description",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "experience",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "poetry",
    checkConstraints: {
      poetry_xata_id_length_xata_id: {
        name: "poetry_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_poetry_xata_id_key: {
        name: "_pgroll_new_poetry_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "description",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "link",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "name",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "projects",
    checkConstraints: {
      projects_xata_id_length_xata_id: {
        name: "projects_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_projects_xata_id_key: {
        name: "_pgroll_new_projects_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "description",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "link",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "name",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "progress",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "skills",
    checkConstraints: {
      skills_xata_id_length_xata_id: {
        name: "skills_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_skills_xata_id_key: {
        name: "_pgroll_new_skills_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "attribute affected",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "description",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "grade",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "name",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "status_effects",
    checkConstraints: {
      status_effects_xata_id_length_xata_id: {
        name: "status_effects_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_status_effects_xata_id_key: {
        name: "_pgroll_new_status_effects_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "attribute affected",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "description",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "grade",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "name",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"string"}',
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Articles = InferredTypes["articles"];
export type ArticlesRecord = Articles & XataRecord;

export type AttributesLog = InferredTypes["attributes_log"];
export type AttributesLogRecord = AttributesLog & XataRecord;

export type Campaigns = InferredTypes["campaigns"];
export type CampaignsRecord = Campaigns & XataRecord;

export type ExperienceLog = InferredTypes["experience_log"];
export type ExperienceLogRecord = ExperienceLog & XataRecord;

export type Poetry = InferredTypes["poetry"];
export type PoetryRecord = Poetry & XataRecord;

export type Projects = InferredTypes["projects"];
export type ProjectsRecord = Projects & XataRecord;

export type Skills = InferredTypes["skills"];
export type SkillsRecord = Skills & XataRecord;

export type StatusEffects = InferredTypes["status_effects"];
export type StatusEffectsRecord = StatusEffects & XataRecord;

export type DatabaseSchema = {
  articles: ArticlesRecord;
  attributes_log: AttributesLogRecord;
  campaigns: CampaignsRecord;
  experience_log: ExperienceLogRecord;
  poetry: PoetryRecord;
  projects: ProjectsRecord;
  skills: SkillsRecord;
  status_effects: StatusEffectsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Kai-Roth-s-workspace-jkbg77.eu-central-1.xata.sh/db/status-window",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
